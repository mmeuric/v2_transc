/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Tournament, TournamentInterface } from "../Tournament";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_id",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "_nicknames",
        type: "string[]",
      },
      {
        internalType: "uint256[]",
        name: "_ranks",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_points",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "playerId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "nickname",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "rank",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "points",
        type: "uint256",
      },
    ],
    name: "PlayerRegistered",
    type: "event",
  },
  {
    inputs: [],
    name: "getAllPlayers",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "nickname",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "rank",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "points",
            type: "uint256",
          },
        ],
        internalType: "struct Tournament.Player[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "map",
    outputs: [
      {
        internalType: "string",
        name: "nickname",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "rank",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "points",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type TournamentConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TournamentConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Tournament__factory extends ContractFactory {
  constructor(...args: TournamentConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _id: BigNumberish[],
    _nicknames: string[],
    _ranks: BigNumberish[],
    _points: BigNumberish[],
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _id,
      _nicknames,
      _ranks,
      _points,
      overrides || {}
    );
  }
  override deploy(
    _id: BigNumberish[],
    _nicknames: string[],
    _ranks: BigNumberish[],
    _points: BigNumberish[],
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _id,
      _nicknames,
      _ranks,
      _points,
      overrides || {}
    ) as Promise<
      Tournament & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Tournament__factory {
    return super.connect(runner) as Tournament__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TournamentInterface {
    return new Interface(_abi) as TournamentInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Tournament {
    return new Contract(address, _abi, runner) as unknown as Tournament;
  }
}
