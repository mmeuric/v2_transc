/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Tournament {
  export type PlayerStruct = {
    nickname: string;
    rank: BigNumberish;
    points: BigNumberish;
  };

  export type PlayerStructOutput = [
    nickname: string,
    rank: bigint,
    points: bigint
  ] & { nickname: string; rank: bigint; points: bigint };
}

export interface TournamentInterface extends Interface {
  getFunction(nameOrSignature: "getAllPlayers" | "map"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PlayerRegistered"): EventFragment;

  encodeFunctionData(
    functionFragment: "getAllPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "map", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "getAllPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "map", data: BytesLike): Result;
}

export namespace PlayerRegisteredEvent {
  export type InputTuple = [
    playerId: BigNumberish,
    nickname: string,
    rank: BigNumberish,
    points: BigNumberish
  ];
  export type OutputTuple = [
    playerId: bigint,
    nickname: string,
    rank: bigint,
    points: bigint
  ];
  export interface OutputObject {
    playerId: bigint;
    nickname: string;
    rank: bigint;
    points: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Tournament extends BaseContract {
  connect(runner?: ContractRunner | null): Tournament;
  waitForDeployment(): Promise<this>;

  interface: TournamentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllPlayers: TypedContractMethod<
    [],
    [Tournament.PlayerStructOutput[]],
    "view"
  >;

  map: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        nickname: string;
        rank: bigint;
        points: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllPlayers"
  ): TypedContractMethod<[], [Tournament.PlayerStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "map"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        nickname: string;
        rank: bigint;
        points: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "PlayerRegistered"
  ): TypedContractEvent<
    PlayerRegisteredEvent.InputTuple,
    PlayerRegisteredEvent.OutputTuple,
    PlayerRegisteredEvent.OutputObject
  >;

  filters: {
    "PlayerRegistered(uint256,string,uint256,uint256)": TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;
    PlayerRegistered: TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;
  };
}
